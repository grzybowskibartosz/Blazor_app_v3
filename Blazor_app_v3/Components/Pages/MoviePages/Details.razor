@page "/movies/details"
@inject Blazor_app_v3.Data.ApplicationDbContext DB
@using Blazor_app_v3.Components.Classes
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h4>Movie</h4>
    <hr />
    @if (movie is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@movie.Title</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@movie.Description</dd>
            <dt class="col-sm-2">RelaseDate</dt>
            <dd class="col-sm-10">@movie.RelaseDate</dd>
            <dt class="col-sm-2">Rate</dt>
            <dd class="col-sm-10">@movie.AverageRating</dd>
            <dt class="col-sm-2">Poster</dt>
            <dd class="col-sm-10">
                @if (!string.IsNullOrEmpty(movie.imgUrl))
                {
                    <img src="@movie.imgUrl" alt="Movie Image" width="350" height="500" />
                }
                else
                {
                    <p>No image available</p>
                }
            </dd>
        </dl>
        <div>
            <EditForm Model="userRating" OnValidSubmit="UpdateRating" FormName="rating2" Enhance>
                <label for="rating">Your Rating (1-10):</label>
                <InputNumber id="rating" @bind-Value="userRating.RateValue" min="1" max="10" class="form-control" />
                <button type="submit" class="btn btn-primary">Submit Rating</button>
            </EditForm>
        </div>
        <div>
            <a href="@($"/movies/edit?id={movie.Id}")">Edit</a> |
            <a href="@($"/movies")">Back to List</a>
        </div>
    }
</div>

@code {
    Movie? movie;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Class userRating { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        movie = await DB.Movie.FirstOrDefaultAsync(m => m.Id == Id);

        if (movie is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task UpdateRating()
    {
        var movieToUpdate = await DB.Movie.FindAsync(movie.Id);
        if (movieToUpdate != null)
        {
            Console.WriteLine(userRating.RateValue);
            movieToUpdate.Rate += userRating.RateValue;
            movieToUpdate.Rate_num += 1;
            await DB.SaveChangesAsync();
            StateHasChanged();

        }
    }
}
